class UniquePathsII {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length; //row
        if (m < 1) {
            return 0;
        }
        int n = obstacleGrid[0].length; //column
        if (n < 1) {
            return 0;
        }
        int[][] res = new int[m][n];
        for (int i = 0 ; i < m ; i ++ ) {
            if (obstacleGrid[i][0] == 1) {
                res[i][0] = 0;
            } else if (i > 0 && res[i-1][0] == 0) {
                res[i][0] = 0;
            } else {
                res[i][0] = 1;
            }
        }
        for (int j = 0 ; j < n ; j ++ ) {
            if (obstacleGrid[0][j] == 1) {
                res[0][j] = 0;
            } else if (j > 0 && res[0][j-1] == 0) {
                res[0][j] = 0;
            } else {
                res[0][j] = 1;
            }
        }
        for (int i = 1 ; i < m ; i ++ ) {
            for (int j = 1 ; j < n ; j ++ ) {
                if (obstacleGrid[i][j] == 1) {
                    res[i][j] = 0;
                } else {
                    res[i][j] = res[i-1][j] + res[i][j-1];
                }
            }
        }
        return res[m-1][n-1];
    }
}
